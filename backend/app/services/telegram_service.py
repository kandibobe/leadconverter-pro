import httpx
from app.core.config import settings
from app.schemas import LeadOut

async def send_telegram_notification(lead_data: LeadOut):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ –≤ Telegram.
    """
    token = settings.TELEGRAM_BOT_TOKEN
    chat_id = settings.TELEGRAM_CHAT_ID
    
    price_formatted = f"{lead_data.final_price:,.2f} RUB"
    
    text = (
        f"üöÄ **–ù–æ–≤—ã–π –ª–∏–¥!**\n\n"
        f"**Email –∫–ª–∏–µ–Ω—Ç–∞:** {lead_data.client_email}\n"
        f"**–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {price_formatted}\n\n"
        f"**–î–µ—Ç–∞–ª–∏:**\n"
    )
    for question, answer in lead_data.answers_details.items():
        text += f"- *{question}*: {answer}\n"

    url = f"https://api.telegram.org/bot{token}/sendMessage"
    params = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "Markdown"
    }
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(url, json=params)
            if response.status_code == 200:
                print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            else:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code} - {response.text}")
        except Exception as e:
            print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")